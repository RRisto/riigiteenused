andmedLai.2012=andmed[, !grepl("empty.|2011.|2013.|2014.|2015.",
names(andmed)), with=F],
andmedLai.2011=andmed[, !grepl("empty.|2014.|2013.|2012.|2015.",
names(andmed)), with=F],
andmedLai.Empty=andmed[, !grepl("2014.|2011.|2013.|2012.|2015.",
names(andmed)), with=F])
years=gsub("[^0-9]","",names(andmedLaiList))#leiab aastad
years=ifelse(nchar(years)==0, "empty", years)#tühi element asenda "empty"ga
years=as.list(years)#tee listiks
andmedLaiList=Map(cbind, andmedLaiList, year = years)#lisa mõõtmise aasta
#lapply läbi korrastaja
andmedLaiList <- lapply(andmedLaiList,
function(df) {
korrastaja(andmed=df, mootmiseAasta=df$year[1],
eemalda=paste0(df$year,".")[1])
})
#tee üheks data frame/table-ks
andmedPikk=rbindlist(andmedLaiList, fill=TRUE)
andmedPikk[, value:=as.numeric(as.character(value))]#tee characteriks
andmedPikk[, MootmiseAasta:=gsub("empty", "pole moodetud", MootmiseAasta)]
}
andmedSisse=function(url="https://www.riigiteenused.ee/api/et/all") {
library(rjson)
library(jsonlite)
#loeme andmed sisse
fromJSON(url, flatten=T)
}
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
library(data.table)
andmedPikk=andmedPikaks(andmed)
unique(andmedPikk$kanal)
korrastaja
library(devtools)
install_github("RRisto/riigitenused-dev")
install_github("RRisto/riigiteenused-dev")
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
View(andmedPikk)
unique(andmedPikk$kanal)
library(devtools)
install_github("RRisto/riigitenused-dev")
install_github("RRisto/riigiteenused-dev")
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
unique(andmedPikk$kanal)
iconv("Tekstisõnum.", from = "latin1", to = "UTF-8")
install_github("RRisto/riigiteenused-dev")
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
install_github("RRisto/riigiteenused-dev")
library(riigiteenused)
andmedPikk=andmedPikaks(andmed)
unique(andmedPikk$kanal)
korrastaja
library(devtools)
install_github
install_github("RRisto/riigiteenused-dev")
install_github("RRisto/riigiteenused-dev", force = T)
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
library(devtools)
install_github("RRisto/riigiteenused")
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikak
andmedPikk=andmedPikaks(andmed)
log(1.47)
log(1.5)
exp(1/29)
exp(1/29)
dexp(1/29)
dexp(1/29)
rexp(1/29)
log(30)
log(1/30)
log(1/29)
log(exp(1/29))
exp(1/29)
exp(1/30)
exp(1/29)
exp(29)
exp(30)
log(exp(30))
aastad=c("2011", "2012","2013","2014","2015", "empty")
list(aastad)
as.list(aastad)
kn <- c("1", "a", "b")
R> nl <- vector(mode="list", length=length(kn)-1)
kn <- c("1", "a", "b")
nl <- vector(mode="list", length=length(kn)-1)
nl
kn <- c( "a", "b")
nl <- vector(mode="list", length=length(kn))
nl
names(nl) <- kn[-1]
R> nl <- lapply(nl, function(x) kn[1])
names(nl) <- kn[-1]
nl <- lapply(nl, function(x) kn[1])
names(nl) <- kn
nl <- lapply(nl, function(x) kn[1])
nl
aastad=c("2011", "2012","2013","2014","2015", "empty")
andmedLaiList=vector(mode="list", length=length(aastad))
names(andmedLaiList) <- aastad
paste(aastad, sep = "|")
paste(aastad, collapse  = "|")
aastad=c("2011.", "2012.","2013.","2014.","2015.", "empty.")
paste(aastad, collapse  = "|")
proov=split(andmed,!grepl("empty.|2011.|2013.|2012.|2014.",
names(andmed)))
names(proov)
eraldaja=function(andmed, aastad) {
andmed[, !grepl(aastad,names(andmed)), with=F]
}
proov=mapply(eraldaja, aastad=aastad,MoreArgs=list(data=andmed),
SIMPLIFY = F)
eraldaja=function(andmed, aasta) {
andmed[, !grepl(aastad,names(andmed)), with=F]
}
proov=mapply(eraldaja, aasta=aastad,MoreArgs=list(data=andmed),
SIMPLIFY = F)
proov=mapply(eraldaja, aasta=aastad,MoreArgs=data=andmed,
SIMPLIFY = F)
proov=mapply(eraldaja, aasta=aastad,MoreArgs=data=andmed,
SIMPLIFY = F)
proov=mapply(eraldaja, aasta=aastad,MoreArgs=c(data=andmed),
SIMPLIFY = F)
proov=mapply(eraldaja, aasta=aastad,MoreArgs=list(andmed=andmed),
SIMPLIFY = F)
library(data.table)
andmed=data.table(andmed)
proov=mapply(eraldaja, aasta=aastad,MoreArgs=list(andmed=andmed),
SIMPLIFY = F)
names(proov)
ncol(proov)
list(aastad)
colNimed=c()
for(i in 1:length(aastad)) {
colNimed[i]=paste(aastad[-i], collapse = "|")
}
proov=lapply(andmed)
proov=lapply(andmed, grepl("2015", names(andmed)))
library(data.table)
colNimed
proov=mapply(split(f, col(x)), f=colNimed,MoreArgs=list(x=andmed))
proov=mapply(split, f=colNimed,MoreArgs=list(x=col(andmed)))
names(proov)
proov2=proov[[1]]
colNimed=c()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[i]=grep(paste(aastad[-i], collapse = "|"),
names(andmed), values=T)
}
colNimed=c()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[i]=grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T)
}
colNimed
colNimed=c()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[i]=!grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T)
}
colNimed=c()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[i]=grep(!paste(aastad[-i], collapse = "|"),
names(andmed), value=T)
}
colNimed=c()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[i]=grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T, invert=T)
}
colNimed
i=1
colNimed[i]=grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T, invert=T)
grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T, invert=T
)
colNimed=list()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[[i]]=grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T, invert=T)
}
proov=mapply(split, f=colNimed,MoreArgs=list(x=col(andmed)))
proov2=proov[[1]]
names(proov)
class(proov)
str(proov)
proov2
proov2=as.data.frame(proov2)
View(proov2)
proov=mapply(function(ColNames, data)
data[, Colnames, names(data), with=F],
Colnames=colNimed,MoreArgs=list(data=andmed))
colNimed=list()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[[i]]=c(grep(paste(aastad[-i], collapse = "|"),
names(andmed), value=T, invert=T))
}
colNimed[[1]]
class(colNimed[[1]])
is.vector(colNimed[[1]])
proov=mapply(function(ColNames, data)
data[, Colnames, names(data), with=F],
Colnames=colNimed,MoreArgs=list(data=andmed))
class(colNimed)
str(colNimed)
proov=mapply(function(ColNames, data)
data[, Colnames, names(data), with=F],
Colnames=colNimed,MoreArgs=data=andmed)
proov=mapply(function(ColNames, data)
data[, Colnames, names(data), with=F],
Colnames=colNimed,MoreArgs=c(data=andmed))
proov=mapply(function(ColNames, data)
data[, Colnames, names(data), with=F],
Colnames=colNimed,MoreArgs=list(data=andmed))
proov=mapply(function(colNimed, andmed)
andmed[, colNimed, names(andmed), with=F],
colNimed,MoreArgs=list(andmed=andmed))
names(proov)
names(proov)=aastad
andmedLai.2015=andmed[, !grepl("empty.|2011.|2013.|2012.|2014.",
names(andmed)), with=F]
proov2=proov[[1]]
andmedLai.Empty=andmed[, !grepl("2014.|2011.|2013.|2012.|2015.",
names(andmed)), with=F])
andmedLai.Empty=andmed[, !grepl("2014.|2011.|2013.|2012.|2015.",
names(andmed)), with=F]
names(proov[[1]])
names(proov)
andmedLai.2011=andmed[, !grepl("empty.|2014.|2013.|2012.|2015.",
names(andmed)), with=F]
identical(proov2, andmedLai.2011)
proov2=proov[[6]]
identical(proov2, andmedLai.Empty)
aastad=c("2011", "2012","2013","2014","2015", "empty")
paste(aastad,".")
paste0(aastad,".")
paste(paste0(aastad[-i],"."), collapse = "|")
i
years
years=gsub("[^0-9]","",names(andmedLaiList))#leiab aastad
years
andmedPikaks=function(andmedLai) {
andmed=data.table(andmedLai)
#################################
#tee mõõtmise aasta järgi listiks
aastad=c("2011", "2012","2013","2014","2015", "empty")
colNimed=list()
for(i in 1:length(aastad)) {
#colNimed[i]=paste(aastad[-i], collapse = "|")
colNimed[[i]]=c(grep(paste(paste0(aastad[-i],"."), collapse = "|"),
names(andmed), value=T, invert=T))
}
andmedLaiList=mapply(function(colNimed, andmed)
andmed[, colNimed, names(andmed), with=F],
colNimed,MoreArgs=list(andmed=andmed))
names(andmedLaiList)=aastad
andmedLaiList=Map(cbind, andmedLaiList, year = as.list(aastad))#lisa mõõtmise aasta
#lapply läbi korrastaja
andmedLaiList <- lapply(andmedLaiList,
function(df) {
korrastaja(andmed=df, mootmiseAasta=df$year[1])
})
#tee üheks data frame/table-ks
andmedPikk=rbindlist(andmedLaiList, fill=TRUE)
andmedPikk[, value:=as.numeric(as.character(value))]#tee characteriks
andmedPikk[, MootmiseAasta:=gsub("empty", "pole moodetud", MootmiseAasta)]
#################################
# andmedLaiList=list(
#   andmedLai.2015=andmed[, !grepl("empty.|2011.|2013.|2012.|2014.",
#                               names(andmed)), with=F],
# andmedLai.2014=andmed[, !grepl("empty.|2011.|2013.|2012.|2015.",
#                               names(andmed)), with=F],
# andmedLai.2013=andmed[, !grepl("empty.|2011.|2012.|2014.|2015.",
#                               names(andmed)), with=F],
# andmedLai.2012=andmed[, !grepl("empty.|2011.|2013.|2014.|2015.",
#                               names(andmed)), with=F],
# andmedLai.2011=andmed[, !grepl("empty.|2014.|2013.|2012.|2015.",
#                               names(andmed)), with=F],
# andmedLai.Empty=andmed[, !grepl("2014.|2011.|2013.|2012.|2015.",
#                                names(andmed)), with=F])
#
# years=gsub("[^0-9]","",names(andmedLaiList))#leiab aastad
# years=ifelse(nchar(years)==0, "empty", years)#tühi element asenda "empty"ga
# years=as.list(years)#tee listiks
#
# andmedLaiList=Map(cbind, andmedLaiList, year = years)#lisa mõõtmise aasta
# #lapply läbi korrastaja
# andmedLaiList <- lapply(andmedLaiList,
#                         function(df) {
#   korrastaja(andmed=df, mootmiseAasta=df$year[1])
# })
# #tee üheks data frame/table-ks
# andmedPikk=rbindlist(andmedLaiList, fill=TRUE)
# andmedPikk[, value:=as.numeric(as.character(value))]#tee characteriks
# andmedPikk[, MootmiseAasta:=gsub("empty", "pole moodetud", MootmiseAasta)]
}
proov=andmedPikaks(andmed)
korrastaja=function(andmed, mootmiseAasta) {
#eemalda üleliigne col nimedest
kanalid=c("Veebileht / portaal.","E-iseteenindus.","Eesti.ee.",
"Nutirakendus.","Digitelevisioon.","E-post.",
"Tekstis",
"Telefon.","Faks.","Post.","Letiteenus.","Kliendi juures.")
#kanalite lõikes meldime
koos=mapply(meltimine, kanal=kanalid,MoreArgs=list(data=andmed),
SIMPLIFY = F)
#keevitame üheks dfks
koos=rbindlist(koos, fill=TRUE)
#eemaldame kanali ja näitaja ning paneme eraldi veergu
if(length(koos)==0) {
return(NULL)
} else {
koos[,variable:=gsub(".ee.", ".", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Letiteenus büroos", "Teeninduslett",
as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Veebileht / portaal", "Veebileht",
as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Kliendi juures", "Kliendijuures",
as.character(koos[,variable]), fixed=T)]
koos[, c("kanal", "naitaja") := tstrsplit(
as.character(koos[["variable"]]), "\\.(?=[^\\.]+$)", perl=T)]
koos[,kanal:=gsub("^.*\\.", "", koos[, kanal])]
#viskame välja tühjad read, kus pole linki
koos=koos[link!="NA"]
koos[,MootmiseAasta:=mootmiseAasta]
koos
}
}
meltimine=function(kanal, data) {
sub=data[,grepl(paste(kanal, "|identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse", sep=""),
names(data)), with=F]
id=grep(c("identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse|link"), names(sub), value=T)
if(length(id)<7) {
tulem=NULL
} else {
#meldime andmed kitsaks
tulem=reshape2::melt(sub, id=id)
#muudan variable nime ära, mis on kanalispets, muidu ei saa rbindida
lingiNimi=names(tulem)[7]
setnames(tulem, old=lingiNimi, new=c("link"))
}
tulem
}
proov=andmedPikaks(andmed)
View(proov)
rm(andmedPikaks())
rm(andmedPikaks
)
rm(korrastaja)
rm(meltimine)
proov2=riigitenused::andmedPikaks(andmed)
proov2=riigiteenused::andmedPikaks(andmed)
library(data.table)
proov2=riigiteenused::andmedPikaks(andmed)
proov2=riigiteenused::andmedPikaks(data.table(andmed))
library(riigiteenused)
proov2=andmedPikaks(data.table(andmed))
identical(proov, proov2)
str(proov)
identical(proov$MootmiseAasta, proov2$MootmiseAasta)
proov$MootmiseAasta
proov2$MootmiseAasta
write.table(proov, "proov.csv", sep=";", row.names = F)
write.table(proov2, "proov2.csv", sep=";", row.names = F)
library(devtools)
install_github("RRisto/riigiteenused-dev")
library(riigiteenused)
andmed=andmedSisse()
andmedPikk=andmedPikaks(andmed)
url="https://www.riigiteenused.ee/api/et/all"
library(rjson)
library(jsonlite)
#loeme andmed sisse
#fromJSON(url, flatten=T) ei funka
lai=fromJSON(url, flatten=T)
lai=lai[lai$teenuste_kanalid_ja_moodikud!="list()",]#kus on tühi sealt eemaldab
moodik <- rbindlist(lapply(lai[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
library(data.table)
#fromJSON(url, flatten=T) ei funka
lai=fromJSON(url, flatten=T)
lai=lai[lai$teenuste_kanalid_ja_moodikud!="list()",]#kus on tühi sealt eemaldab
moodik <- rbindlist(lapply(lai[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
lai=fromJSON(url, flatten=T)
lai=lai[lai$teenuste_kanalid_ja_moodikud!="list()",]#kus on tühi sealt eemaldab
moodik <- rbindlist(lapply(lai[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
lai$teenuste_kanalid_ja_moodikud=NULL
lai=cbind(lai,moodik)
library(riigiteenused)
library(riigiteenused2)
library(riigiteenused2)
lai=andmedSisse2()
lai=andmedPikaks2(lai)
lai=andmedSisse2()
pikk=andmedPikaks2(lai)
str(pikk)
View(andmedPikk)
proov=pikk[pikk$naitaja=="naitaja"ajakulu",]$value
proov=pikk[pikk$naitaja=="naitaja",]$value
View(pikk)
proov=pikk[pikk$naitaja=="ajakulu",]$value
proov
sum(proov, na.rm=T)
sum(as.numeric(proov), na.rm=T)
proov=pikk[pikk$naitaja=="ajakulu"&pikk$allasutus=="Andmekaitse Inspektsioon"]$value
proov=pikk[pikk$naitaja=="ajakulu"&pikk$allasutus=="Andmekaitse Inspektsioon",]$value
sum(as.numeric(proov), na.rm=T)
install.packages("shiny")
install.packages("shinydashboar")
install.packages("shinydashboard")
andmedSisse2=function(url="https://www.riigiteenused.ee/api/et/all") {
#library(rjson)
library(jsonlite)
#loeme andmed sisse
lai=fromJSON(url)
flatten(lai[[2]])
}
proov=andmedSisse2()
andmedPikaks2=function(andmedLai) {
tulem=data.frame(NULL)
for (i in 1:nrow(andmedLai)) {
#id=ver2$identifier[i]
sub=andmedLai$serviceStatistics[i]
aastad=sub[[1]][2]
teenustulem=data.frame(NULL)
for (j in 1:nrow(aastad)) {
abikas=sub[[1]][3]$availableChannel[[j]]
moodikud=abikas$channelStatistics
taisrida=cbind(moodikud, abikas[, c("url", "additionalType", "payment")])
taisrida=cbind(taisrida, andmedLai[i, c("domain", "subdomain", "serviceType",
"provider.name", "provider.memberOf.name")])
taisrida$aasta=aastad$value[j]
teenustulem=rbind(teenustulem, taisrida)
}
teenustulem$id=andmedLai$identifier[i]
tulem=rbind(tulem, teenustulem)
}
library(reshape2)
tulem$'@type'=NULL
#nimetame veerud ümber
names(tulem)[names(tulem)=="aasta"] <- "MootmiseAasta"
names(tulem)[names(tulem)=="payment"] <- "makse"
names(tulem)[names(tulem)=="id"] <- "identifikaator"
names(tulem)[names(tulem)=="domain"] <- "valdkond"
names(tulem)[names(tulem)=="subdomain"] <- "alamvaldkond"
names(tulem)[names(tulem)=="serviceType"] <- "teenusetyyp"
names(tulem)[names(tulem)=="provider.memberOf.name"] <- "ministeerium"
names(tulem)[names(tulem)=="provider.name"] <- "allasutus"
names(tulem)[names(tulem)=="additionalType"] <- "kanal"
names(tulem)[names(tulem)=="transaction"] <- "osutamistearv"
names(tulem)[names(tulem)=="satisfaction"] <- "rahulolu"
names(tulem)[names(tulem)=="cost"] <- "halduskulu"
names(tulem)[names(tulem)=="activeTimeSpent"] <- "ajakulu"
names(tulem)[names(tulem)=="totalTimeSpent"] <- "ajakuluBruto"
pikk=melt(tulem, measure.vars=c("osutamistearv", "rahulolu", "halduskulu",
"ajakulu", "ajakuluBruto"))
names(pikk)[names(pikk)=="variable"] <- "naitaja"
#kus on müüdik puudu paenme NA
pikk$value=ifelse(pikk$value=="", NA, pikk$value)
#kui mõõdik on NA, siis paneme ka aasta emtpyks
#pikk$aasta=ifelse(is.na(pikk$value), "empty", pikk$aasta)
#eemaldame duplikaadid
#pikk[!duplicated(pikk), ]
pikk
}
library(reshape2)
proovpikk=andmedPikaks2(proov)
View(proovpikk)
library(devtools)
install_github("RRisto/Riigiteenused-dev")
library(riigiteenused2)
proov=andmedSisse2()
proovpikk=andmedPikaks2(proov)
View(proovpikk)
library(riigiteenused2)
library(devtools)
install_github("RRisto/Riigiteenused-dev")
library(riigiteenused)
proov=andmedSisse()
proovpikk=andmedPikaks()
proovpikk=andmedPikaks(proov)
library(riigiteenused)
library(devtools)
install_github("RRisto/Riigiteenused-dev")
library(riigiteenused)
proov=andmedSisse()
proovpikk=andmedPikaks(prov)
proovpikk=andmedPikaks(proov)
View(proovpikk)
install.packages("rmarkdown")
