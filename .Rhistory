library(riigiteenused)
library(riigiteenused)
library(devtools)
install_github("RRisto", "riigiteenused")
library(devtools)
install_github("Risto Hinno", "riigiteenused")
library(devtools)
install_github("riigiteenused/RRisto", "riigiteenused")
library(riigiteenused)
library(riigiteenused)
package.skeleton(name="linmod", code_files=c("andmedSisse.R", "andmedPikaks.R", "meltimine.R","korrastaja.R"))
library(riigiteenused)
library(devtools)
install_github("RRisto/riigiteenused", "riigiteenused")
proov=andmedSisse()
install_github("RRisto", "riigiteenused")
install_github("riigiteenused", "RRisto")
andmedSisse()
?riigiteenused
?\riigiteenused
??riigiteenused
andmedSisse("www.riigiteenused.ee")
library(riigiteenused)
proov=andmedSisse("https://www.riigiteenused.ee/api/et/all")
View(proov)
class(proov$regulatsioon)
url="https://www.riigiteenused.ee/api/et/all"
library(jsonlite)
library(data.table)
andmed=fromJSON(readLines(url), flatten=T)
View(andmed)
andmed=fromJSON(readLines(url), flatten=T)
write.csv(proov[,1:20],"proov.csv", row.names = F, sep";")
write.table(proov[,1:20],"proov.csv", row.names = F, sep";")
write.table(proov[,1:20],"proov.csv", row.names = F, sep=";")
write.table(andmed[,1:20],"proov.csv", row.names = F, sep";")
write.table(andmed[,1:20],"proov.csv", row.names = F, sep=";")
write.table(andmed[,1:20],"proov.csv", row.names = F)
write.table(andmed[,1:20],"proov.csv", row.names = F, sep=",")
andmed=fromJSON(readLines(url), flatten=T)
andmed=andmed["teenuste_kanalid_ja_moodikud"!="list()"]
andmedMoodik <- rbindlist(lapply(andmed[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
View(andmedMoodik)
andmedSisse=function(url) {
#loeme andmed sisse
library(jsonlite)
library(data.table)
andmed=fromJSON(readLines(url), flatten=T)
andmed=andmed["teenuste_kanalid_ja_moodikud"!="list()"]
andmedMoodik <- rbindlist(lapply(andmed[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
andmed
}
proov2=andmedSisse(url)
andmed=andmed["regulatsioon"!="list()"]
andmedRegulatsioon <- rbindlist(lapply(andmed[["regulatsioon"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
View(andmed)
andmed$regulatsioon
andmed=fromJSON(readLines(url), flatten=T)
View(andmed)
andmed=fromJSON(readLines(url), flatten=T)
View(andmed)
install.packages(riigiteenused)
library(devtools)
install_github("RRisto/riigiteenused")
library(riigiteenused)
proov=andmedSisse(url)
install_github("RRisto/riigiteenused")
proov=andmedSisse(url)
View(proov2)
write.table(proov, "proov.csv")
regul=unlist(proov$regulatsioon)
regul
length(unique(regul))
data.frame(lapply(proov$regulatsioon, function(x) unlist(x)))
data.frame(lapply(proov, function(x) unlist(x)))
proov$regul = unlist(proov$regulatsioon)
andmedMoodik <- rbindlist(lapply(andmed[["regulatsioon"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
andmed=andmed["regulatsioon"!="list()"]
andmedMoodik <- rbindlist(lapply(andmed[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
andmed=andmed["regulatsioon"!="list()"]
andmedMoodik <- rbindlist(lapply(andmed[["regulatsioon"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
proov=andmedSisse(url)
proov$regulatsioon=NULL
write.table(proov, "riigiteenused.csv", sep=",", row.names = F)
proov$sihtgrupp=NULL
write.table(proov, "riigiteenused.csv", sep=",", row.names = F)
andmedSisse=function(url) {
#loeme andmed sisse
library(rsjon)
library(jsonlite)
fromJSON(url, flatten=T)
}
proov=andmedSisse("https://www.riigiteenused.ee/api/et/all")
install.packages("rjson")
proov=andmedSisse("https://www.riigiteenused.ee/api/et/all")
andmedSisse=function(url) {
#loeme andmed sisse
library(rjson)
library(jsonlite)
fromJSON(url, flatten=T)
}
proov=andmedSisse("https://www.riigiteenused.ee/api/et/all")
library(devtools)
install_github("RRisto/riigiteenused")
library(riigiteenused)
andmedLai=andmedSisse("https://www.riigiteenused.ee/api/et/all")
andmedPikk=andmedPikaks(andmedLai)
proov=andmedSisse("https://www.riigiteenused.ee/api/et/all")
names(proov)
meltimine=function(kanal, data) {
library(reshape2)
#leiame ainult seda kanalit puudutavad muutujad
sub=data[, grepl(paste(kanal, "|identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse", sep=""), names(data))]
#määran id-d, mis meltimisel meltimata jäävad
id=grep(c("identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse|link"), names(sub), value=T)
#kui selle kanali kohta stati pole, anna vastuseks null
if(length(id)<7) {
tulem=NULL
} else {
#meldime andmed kitsaks
tulem=melt(sub, id=id)
#muudan variable nime ära, mis on kanalispets, muidu ei saa rbindida
names(tulem)=c("identifikaator", "tegevusvaldkond", "tyyp", "ministeerium", "allasutus",
"makse", "link",  "variable",
"value")
}
tulem
}
lett=meltimine("Letiteenus büroos.", data=proov) #shiny jaoks vaja
View(lett)
(75+75+25)/3
p
iconv("Tekstisõnum.", "UTF-8")
enc2utf8("Tekstisõnum")
enc2utf8("Tekstisõnum")
enc2utf8("Tekstisõnum.")
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
korrastajaDT=function(andmed, eemalda, mootmiseAasta) {
library(data.table)
andmed=data.table(andmed)
#eemalda - mis osa columnite nimedest tuleb eemdalda
setnames(andmed, names(andmed), gsub(eemalda, "", names(andmed)))
#kanalite lõikes meldime
veeb=meltimineDT("Veebileht / portaal.", data=andmed)
iseteen=meltimineDT("E-iseteenindus.", data=andmed)
eesti=meltimineDT("Eesti.ee.", data=andmed)
nuti=meltimineDT("Nutirakendus.", data=andmed)
digitv=meltimineDT("Digitelevisioon.", data=andmed)
epost=meltimineDT("E-post.", data=andmed)
sms=meltimineDT("Tekstisõnum.", data=andmed)
telefon=meltimineDT("Telefon.", data=andmed)
faks=meltimineDT("Faks.", data=andmed)
post=meltimineDT("Post.", data=andmed)
lett=meltimineDT("Letiteenus.", data=andmed)
kodus=meltimineDT("Kliendi juures.", data=andmed)
#rbindime
koos=rbindlist(list(veeb, iseteen, eesti, nuti, digitv, epost, sms, telefon, faks,
post, lett, kodus))
#eemaldame kanali ja näitaja ning paneme eraldi veergu
if (length(koos)==0) {
return(NULL)
} else {
koos[,variable:=gsub(".ee.", ".", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Letiteenus büroos", "Letiteenus", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("E-iseteenindus", "Eiseteenindus", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("E-post", "Epost", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Veebileht / portaal", "Veebileht", as.character(koos[,variable]), fixed=T)]
koos[,variable:=gsub("Kliendi juures", "Kliendijuures", as.character(koos[,variable]), fixed=T)]
koos[, c("kanal", "naitaja") := tstrsplit(as.character(koos[["variable"]]), "\\.(?=[^\\.]+$)", perl=T)]
koos[,kanal:=gsub("^.*\\.", "", koos[, kanal])]
#viskame välja tühjad read, kus pole linki
koos=koos[link!="NA"]
koos[,MootmiseAasta:=mootmiseAasta]
koos
}
}
andmedPikaksDT=function(andmedLai) {
library(data.table)
andmed=data.table(andmedLai)
andmedLai2015=andmed[, !grepl("empty.|2011.|2013.|2012.|2014.",
names(andmed)), with=F]
andmedLai2014=andmed[, !grepl("empty.|2011.|2013.|2012.|2015.",
names(andmed)), with=F]
andmedLai2013=andmed[, !grepl("empty.|2011.|2012.|2014.|2015.",
names(andmed)), with=F]
andmedLai2012=andmed[, !grepl("empty.|2011.|2013.|2014.|2015.",
names(andmed)), with=F]
andmedLai2011=andmed[, !grepl("empty.|2014.|2013.|2012.|2015.",
names(andmed)), with=F]
andmedLaiEmpty=andmed[, !grepl("2014.|2011.|2013.|2012.|2015.",
names(andmed)), with=F]
puhas2015=korrastajaDT(andmedLai2015, "2015.", "2015")
puhas2014=korrastajaDT(andmedLai2014, "2014.", "2014")
puhas2013=korrastajaDT(andmedLai2013, "2013.", "2013")
puhas2012=korrastajaDT(andmedLai2012, "2012.", "2012")
puhas2011=korrastajaDT(andmedLai2011, "2011.", "2011")
puhasEmpty=korrastajaDT(andmedLaiEmpty, "empty.", "pole moodetud")
andmedPikk=rbind(puhas2015, puhas2014, puhas2013, puhas2012,puhas2011,
puhasEmpty)
andmedPikk[, value:=as.numeric(as.character(value))]
}
meltimineDT=function(kanal, data) {
library(data.table)
sub=data[,grepl(paste(kanal, "|identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse", sep=""),
names(data)), with=F]
id=grep(c("identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse|link"), names(sub), value=T)
if(length(id)<7) {
tulem=NULL
} else {
#meldime andmed kitsaks
tulem=melt(sub, id=id)
#muudan variable nime ära, mis on kanalispets, muidu ei saa rbindida
lingiNimi=names(tulem)[7]
setnames(tulem, old=lingiNimi, new=c("link"))
}
tulem
}
andmedSisse=function(url) {
#loeme andmed sisse
library(rjson)
library(jsonlite)
fromJSON(url, flatten=T)
}
andmedLai=andmedSisse("https://www.riigiteenused.ee/api/et/all")
andmedPIkk=andmedPikaksDT(andmedLai)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
library(riigiteenused)
